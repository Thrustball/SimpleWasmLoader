class SimpleWasmLoaderBuilder{static async loadWasm(e,t={}){return WebAssembly.instantiateStreaming(fetch(e),t).then((t=>{let n=new SimpleWasmLoader;n.name=e,n.exports=WebAssembly.Module.exports(t.module),n.module=t.module;let s=t.instance.exports;return n.exports.forEach((e=>{"function"==e.kind?n.functions[e.name]=s[e.name]:"memory"==e.kind&&(n.memory[e.name]=s[e.name])})),n}))}static loadByteArray(e,t,n={}){let s=new SimpleWasmLoader;s.name=e;let o=new WebAssembly.Module(t);s.module=o,s.exports=WebAssembly.Module.exports(o);let r=new WebAssembly.Instance(o,n).exports;return s.exports.forEach((e=>{"function"==e.kind?s.functions[e.name]=r[e.name]:"memory"==e.kind&&(s.memory[e.name]=r[e.name])})),s}}class SimpleWasmLoader{constructor(){this.name="",this.exports=[],this.functions={},this.memory={},this.module}getExports(){return this.exports}getFunctions(){return this.functions}getMemory(){return this.memory}getFunction(e){return this.getFunctions()[e]}}export{SimpleWasmLoaderBuilder};